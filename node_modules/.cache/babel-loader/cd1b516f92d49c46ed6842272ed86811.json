{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\USER\\\\Documents\\\\web\\\\hooks-context-app\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\slicedToArray.js\";import React,{useState,createContext}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export var ThemeContext=/*#__PURE__*/createContext();var ThemeContextProvider=function ThemeContextProvider(props){var _useState=useState(true),_useState2=_slicedToArray(_useState,2),isLightTheme=_useState2[0],setisLightTheme=_useState2[1];var light={syntax:'#555',ui:'#ddd',bg:'#eee'};var dark={syntax:'#ddd',ui:'#333',bg:'#555'};var toggleTheme=function toggleTheme(){setisLightTheme(!isLightTheme);};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{isLightTheme:isLightTheme,light:light,dark:dark,toggleTheme:toggleTheme},children:props.children});};export default ThemeContextProvider;//import React, { createContext } from 'react';\n//create context\n//export const ThemeContext =createContext();\n//create class Component\n//class ThemeContextProvider extends React.Component {\n//state created in cc\n//state =  {\n//isLightTheme: true,\n//light: {syntax: '#555', //ui:'#ddd', bg:'#eee'},\n//dark: {syntax: '#ddd', //ui:'#333', bg:'#555'}   \n//   };\n//   toggleTheme = () => {\n//      this.setState({isLightTheme: !this.state.isLightTheme})\n//  }\n//render() { \n//return (\n//state passed into themeContext\n//this.props.children refers to the children in which the theme context wraps #navbar and booklist.\n//the children are attached to the props\n//    <ThemeContext.Provider //value={{...this.state, toggleTheme: this.toggleTheme}}>\n//        {this.props.children}\n//    </ThemeContext.Provider>\n//        )\n//    }\n//}\n//export default ThemeContextProvider;","map":{"version":3,"sources":["C:/Users/USER/Documents/web/hooks-context-app/src/contexts/ThemeContext.js"],"names":["React","useState","createContext","ThemeContext","ThemeContextProvider","props","isLightTheme","setisLightTheme","light","syntax","ui","bg","dark","toggleTheme","children"],"mappings":"8IAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,aAA1B,KAA+C,OAA/C,C,2CAEA,MAAO,IAAMC,CAAAA,YAAY,cAAGD,aAAa,EAAlC,CAEP,GAAME,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,KAAD,CAAW,CACpC,cAAwCJ,QAAQ,CAAC,IAAD,CAAhD,wCAAOK,YAAP,eAAqBC,eAArB,eAEA,GAAMC,CAAAA,KAAK,CAAG,CAACC,MAAM,CAAE,MAAT,CAAiBC,EAAE,CAAC,MAApB,CAA4BC,EAAE,CAAC,MAA/B,CAAd,CAEA,GAAMC,CAAAA,IAAI,CAAG,CAACH,MAAM,CAAE,MAAT,CAAiBC,EAAE,CAAC,MAApB,CAA4BC,EAAE,CAAC,MAA/B,CAAb,CAEA,GAAME,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACtBN,eAAe,CAAC,CAACD,YAAF,CAAf,CACH,CAFD,CAIA,mBACI,KAAC,YAAD,CAAc,QAAd,EAAuB,KAAK,CAAE,CAACA,YAAY,CAAZA,YAAD,CAAeE,KAAK,CAALA,KAAf,CAAsBI,IAAI,CAAJA,IAAtB,CAA4BC,WAAW,CAACA,WAAxC,CAA9B,UACKR,KAAK,CAACS,QADX,EADJ,CAKH,CAhBD,CAkBA,cAAeV,CAAAA,oBAAf,CAMA;AAEA;AAEA;AAEA;AAEA;AACI;AACA;AACK;AACA;AACA;AACR;AAEA;AACA;AACC;AAEE;AAEI;AACI;AACA;AACA;AACJ;AACA;AACA;AACR;AACA;AACA;AAEA","sourcesContent":["import React, { useState, createContext } from 'react';\r\n\r\nexport const ThemeContext = createContext();\r\n\r\nconst ThemeContextProvider = (props) => {\r\n    const [isLightTheme, setisLightTheme] = useState(true);\r\n\r\n    const light = {syntax: '#555', ui:'#ddd', bg:'#eee'};\r\n\r\n    const dark = {syntax: '#ddd', ui:'#333', bg:'#555'};\r\n\r\n    const toggleTheme = () => {\r\n        setisLightTheme(!isLightTheme);\r\n    }\r\n\r\n    return ( \r\n        <ThemeContext.Provider value={{isLightTheme, light, dark, toggleTheme:toggleTheme}}>\r\n            {props.children}\r\n        </ThemeContext.Provider>\r\n     );\r\n}\r\n \r\nexport default ThemeContextProvider;\r\n\r\n\r\n\r\n\r\n\r\n//import React, { createContext } from 'react';\r\n\r\n//create context\r\n\r\n//export const ThemeContext =createContext();\r\n\r\n//create class Component\r\n\r\n//class ThemeContextProvider extends React.Component {\r\n    //state created in cc\r\n    //state =  {\r\n         //isLightTheme: true,\r\n         //light: {syntax: '#555', //ui:'#ddd', bg:'#eee'},\r\n         //dark: {syntax: '#ddd', //ui:'#333', bg:'#555'}   \r\n //   };\r\n\r\n //   toggleTheme = () => {\r\n //      this.setState({isLightTheme: !this.state.isLightTheme})\r\n  //  }\r\n\r\n    //render() { \r\n        \r\n        //return (\r\n            //state passed into themeContext\r\n            //this.props.children refers to the children in which the theme context wraps #navbar and booklist.\r\n            //the children are attached to the props\r\n        //    <ThemeContext.Provider //value={{...this.state, toggleTheme: this.toggleTheme}}>\r\n        //        {this.props.children}\r\n        //    </ThemeContext.Provider>\r\n//        )\r\n//    }\r\n//}\r\n \r\n//export default ThemeContextProvider;"]},"metadata":{},"sourceType":"module"}